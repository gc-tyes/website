{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\n * This is used to extract one children's worth of events from a stream of navigation action events\n *\n * Based on the 'action' events that get fired for this navigation state, this utility will fire\n * focus and blur events for this child\n */\n\n\nexport default function getChildEventSubscriber(addListener, key) {\n  var initialLastFocusEvent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'didBlur';\n  var actionSubscribers = new Set();\n  var willFocusSubscribers = new Set();\n  var didFocusSubscribers = new Set();\n  var willBlurSubscribers = new Set();\n  var didBlurSubscribers = new Set();\n  var refocusSubscribers = new Set();\n\n  var removeAll = function removeAll() {\n    [actionSubscribers, willFocusSubscribers, didFocusSubscribers, willBlurSubscribers, didBlurSubscribers, refocusSubscribers].forEach(function (set) {\n      return set.clear();\n    });\n    upstreamSubscribers.forEach(function (subs) {\n      return subs && subs.remove();\n    });\n  };\n\n  var getChildSubscribers = function getChildSubscribers(evtName) {\n    switch (evtName) {\n      case 'action':\n        return actionSubscribers;\n\n      case 'willFocus':\n        return willFocusSubscribers;\n\n      case 'didFocus':\n        return didFocusSubscribers;\n\n      case 'willBlur':\n        return willBlurSubscribers;\n\n      case 'didBlur':\n        return didBlurSubscribers;\n\n      case 'refocus':\n        return refocusSubscribers;\n\n      default:\n        return null;\n    }\n  };\n\n  var _emit = function emit(type, payload) {\n    var payloadWithType = _objectSpread({}, payload, {\n      type: type\n    });\n\n    var subscribers = getChildSubscribers(type);\n    subscribers && subscribers.forEach(function (subs) {\n      subs(payloadWithType);\n    });\n  }; // lastFocusEvent keeps track of focus state for one route. First we assume\n  // we are blurred. If we are focused on initialization, the first 'action'\n  // event will cause onFocus+willFocus events because we had previously been\n  // considered blurred\n\n\n  var lastFocusEvent = initialLastFocusEvent;\n  var upstreamEvents = ['willFocus', 'didFocus', 'willBlur', 'didBlur', 'refocus', 'action'];\n  var upstreamSubscribers = upstreamEvents.map(function (eventName) {\n    return addListener(eventName, function (payload) {\n      if (eventName === 'refocus') {\n        _emit(eventName, payload);\n\n        return;\n      }\n\n      var state = payload.state,\n          lastState = payload.lastState,\n          action = payload.action;\n      var lastRoutes = lastState && lastState.routes;\n      var routes = state && state.routes; // const lastFocusKey =\n      //   lastState && lastState.routes && lastState.routes[lastState.index].key;\n\n      var focusKey = routes && routes[state.index].key;\n      var isChildFocused = focusKey === key;\n      var lastRoute = lastRoutes && lastRoutes.find(function (route) {\n        return route.key === key;\n      });\n      var newRoute = routes && routes.find(function (route) {\n        return route.key === key;\n      });\n      var childPayload = {\n        context: \"\".concat(key, \":\").concat(action.type, \"_\").concat(payload.context || 'Root'),\n        state: newRoute,\n        lastState: lastRoute,\n        action: action,\n        type: eventName\n      };\n      var isTransitioning = !!state && state.isTransitioning;\n      var previouslylastFocusEvent = lastFocusEvent;\n\n      if (lastFocusEvent === 'didBlur') {\n        // The child is currently blurred. Look for willFocus conditions\n        if (eventName === 'willFocus' && isChildFocused) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'willFocus') {\n        // We are currently mid-focus. Look for didFocus conditions.\n        // If state.isTransitioning is false, this child event happens immediately after willFocus\n        if (eventName === 'didFocus' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didFocus') {\n        // The child is currently focused. Look for blurring events\n        if (!isChildFocused) {\n          // The child is no longer focused within this navigation state\n          _emit(lastFocusEvent = 'willBlur', childPayload);\n        } else if (eventName === 'willBlur') {\n          // The parent is getting a willBlur event\n          _emit(lastFocusEvent = 'willBlur', childPayload);\n        } else if (eventName === 'action' && previouslylastFocusEvent === 'didFocus') {\n          // While focused, pass action events to children for grandchildren focus\n          _emit('action', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'willBlur') {\n        // The child is mid-blur. Wait for transition to end\n        if (eventName === 'action' && !isChildFocused && !isTransitioning) {\n          // The child is done blurring because transitioning is over, or isTransitioning\n          // never began and didBlur fires immediately after willBlur\n          _emit(lastFocusEvent = 'didBlur', childPayload);\n        } else if (eventName === 'didBlur') {\n          // Pass through the parent didBlur event if it happens\n          _emit(lastFocusEvent = 'didBlur', childPayload);\n        } else if (eventName === 'action' && isChildFocused && !isTransitioning) {\n          _emit(lastFocusEvent = 'didFocus', childPayload);\n        } else if (eventName === 'action' && isChildFocused && isTransitioning) {\n          _emit(lastFocusEvent = 'willFocus', childPayload);\n        }\n      }\n\n      if (lastFocusEvent === 'didBlur' && !newRoute) {\n        removeAll();\n      }\n    });\n  });\n  return {\n    addListener: function addListener(eventName, eventHandler) {\n      var subscribers = getChildSubscribers(eventName);\n\n      if (!subscribers) {\n        throw new Error(\"Invalid event name \\\"\".concat(eventName, \"\\\"\"));\n      }\n\n      subscribers.add(eventHandler);\n\n      var remove = function remove() {\n        subscribers.delete(eventHandler);\n      };\n\n      return {\n        remove: remove\n      };\n    },\n    emit: function emit(eventName, payload) {\n      if (eventName !== 'refocus') {\n        console.error(\"navigation.emit only supports the 'refocus' event currently.\");\n        return;\n      }\n\n      _emit(eventName, payload);\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"module"}