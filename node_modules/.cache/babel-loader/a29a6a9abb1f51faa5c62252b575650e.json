{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport invariant from './utils/invariant';\n/**\n * Utilities to perform atomic operation with navigate state and routes.\n *\n * ```javascript\n * const state1 = {key: 'screen 1'};\n * const state2 = NavigationStateUtils.push(state1, {key: 'screen 2'});\n * ```\n */\n\nvar StateUtils = {\n  /**\n   * Gets a route by key. If the route isn't found, returns `null`.\n   */\n  get: function get(state, key) {\n    return state.routes.find(function (route) {\n      return route.key === key;\n    }) || null;\n  },\n\n  /**\n   * Returns the first index at which a given route's key can be found in the\n   * routes of the navigation state, or -1 if it is not present.\n   */\n  indexOf: function indexOf(state, key) {\n    return state.routes.findIndex(function (route) {\n      return route.key === key;\n    });\n  },\n\n  /**\n   * Returns `true` at which a given route's key can be found in the\n   * routes of the navigation state.\n   */\n  has: function has(state, key) {\n    return !!state.routes.some(function (route) {\n      return route.key === key;\n    });\n  },\n\n  /**\n   * Pushes a new route into the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  push: function push(state, route) {\n    invariant(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);\n    var routes = state.routes.slice();\n    routes.push(route);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n\n  /**\n   * Pops out a route from the navigation state.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at.\n   */\n  pop: function pop(state) {\n    if (state.index <= 0) {\n      // [Note]: Over-popping does not throw error. Instead, it will be no-op.\n      return state;\n    }\n\n    var routes = state.routes.slice(0, -1);\n    return _objectSpread({}, state, {\n      index: routes.length - 1,\n      routes: routes\n    });\n  },\n\n  /**\n   * Sets the focused route of the navigation state by index.\n   */\n  jumpToIndex: function jumpToIndex(state, index) {\n    if (index === state.index) {\n      return state;\n    }\n\n    invariant(!!state.routes[index], 'invalid index %s to jump to', index);\n    return _objectSpread({}, state, {\n      index: index\n    });\n  },\n\n  /**\n   * Sets the focused route of the navigation state by key.\n   */\n  jumpTo: function jumpTo(state, key) {\n    var index = StateUtils.indexOf(state, key);\n    return StateUtils.jumpToIndex(state, index);\n  },\n\n  /**\n   * Sets the focused route to the previous route.\n   */\n  back: function back(state) {\n    var index = state.index - 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Sets the focused route to the next route.\n   */\n  forward: function forward(state) {\n    var index = state.index + 1;\n    var route = state.routes[index];\n    return route ? StateUtils.jumpToIndex(state, index) : state;\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at and updates the routes array accordingly.\n   */\n  replaceAndPrune: function replaceAndPrune(state, key, route) {\n    var index = StateUtils.indexOf(state, key);\n    var replaced = StateUtils.replaceAtIndex(state, index, route);\n    return _objectSpread({}, replaced, {\n      routes: replaced.routes.slice(0, index + 1)\n    });\n  },\n\n  /**\n   * Replace a route by a key.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at. Does not prune the routes.\n   * If preserveIndex is true then replacing the route does not cause the index\n   * to change to the index of that route.\n   */\n  replaceAt: function replaceAt(state, key, route) {\n    var preserveIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var index = StateUtils.indexOf(state, key);\n    var nextIndex = preserveIndex ? state.index : index;\n    var nextState = StateUtils.replaceAtIndex(state, index, route);\n    nextState.index = nextIndex;\n    return nextState;\n  },\n\n  /**\n   * Replace a route by a index.\n   * Note that this moves the index to the position to where the new route in the\n   * stack is at.\n   */\n  replaceAtIndex: function replaceAtIndex(state, index, route) {\n    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);\n\n    if (state.routes[index] === route && index === state.index) {\n      return state;\n    }\n\n    var routes = state.routes.slice();\n    routes[index] = route;\n    return _objectSpread({}, state, {\n      index: index,\n      routes: routes\n    });\n  },\n\n  /**\n   * Resets all routes.\n   * Note that this moves the index to the position to where the last route in the\n   * stack is at if the param `index` isn't provided.\n   */\n  reset: function reset(state, routes, index) {\n    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');\n    var nextIndex = index === undefined ? routes.length - 1 : index;\n\n    if (state.routes.length === routes.length && state.index === nextIndex) {\n      var compare = function compare(route, ii) {\n        return routes[ii] === route;\n      };\n\n      if (state.routes.every(compare)) {\n        return state;\n      }\n    }\n\n    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);\n    return _objectSpread({}, state, {\n      index: nextIndex,\n      routes: routes\n    });\n  }\n};\nexport default StateUtils;","map":null,"metadata":{},"sourceType":"module"}